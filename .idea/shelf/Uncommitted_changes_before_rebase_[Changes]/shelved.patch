Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e043dfd7-72f1-4ede-b555-2ba16603edac\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"importingSettings\">\r\n      <MavenImportingSettings>\r\n        <option name=\"workspaceImportEnabled\" value=\"true\" />\r\n      </MavenImportingSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2KbMKei2P8UFpqSsvDp8L1C2h6q\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e043dfd7-72f1-4ede-b555-2ba16603edac\" name=\"Changes\" comment=\"\" />\r\n      <created>1674238769780</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1674238769780</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision be23b8d20bccc82f9589723e16040782b618e776)
+++ b/.idea/workspace.xml	(date 1674248045562)
@@ -4,7 +4,15 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="e043dfd7-72f1-4ede-b555-2ba16603edac" name="Changes" comment="" />
+    <list default="true" id="e043dfd7-72f1-4ede-b555-2ba16603edac" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/CoreTesting.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/CoreTesting.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/EnglishHelperBot.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/EnglishHelperBot.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/InfinitiveGerund.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/InfinitiveGerund.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Phrasal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Phrasal.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -12,6 +20,9 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
   </component>
   <component name="MavenImportPreferences">
     <option name="importingSettings">
@@ -29,9 +40,19 @@
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
     "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true"
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "last_opened_file_path": "C:/Users/Odd/IdeaProjects/EnglishHelperBot/src/main/java"
   }
 }]]></component>
+  <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\Odd\IdeaProjects\EnglishHelperBot\src\main\java" />
+    </key>
+    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
+      <recent name="" />
+    </key>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -43,4 +64,15 @@
     </task>
     <servers />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
 </project>
\ No newline at end of file
Index: src/main/java/CoreTesting.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.security.SecureRandom;\r\nimport java.util.Scanner;\r\n\r\npublic class CoreTesting {\r\n    char[][] QuestionArr = new char[300][100];                            //массив для хранения строк, содержащих вопросы\r\n    char[][] AnswerArr = new char[300][100];                              //массив для хранения правильных ответов\r\n    int QuestionNumber = 0;                                //общее число вопросов/ответов\r\n    int[] RandomNumberArrPointer;                         //Указатель на массив со случайными числами\r\n    int ErrorsNumber = 0;                                //общее количество ошибок\r\n    int[] WrongAnswer = new int[300];                                //массив для хранения номеров вопросов/ответов, где была ошибка\r\n    int[] MissedQuestions = new int[300];                            //массив для номеров вопросов которые были пропущены\r\n    int WrongIndex = 0;                                    //индекс массива вопросов/ответов c ошибками\r\n    int MissedIndex = 0;                                //индекс массива пропущенных впросов\r\n\r\n    protected int TestingType = 0;\t\t\t\t//хранит число, соответствующее типу тестирования\r\n    String DataFilePath;                                           //0-тест закончен\r\n                                                //1-тест на знание фразовых конструкций\r\n\r\n    CoreTesting(String path) throws IOException {\r\n        DataFilePath=path;\r\n    }\r\n\r\n\r\n\r\n    public int FileToArray() throws IOException {\r\n\r\n\r\n        int answerIndexChar;\r\n        int characterIndex;\r\n        String bufferString;\r\n\r\n        File DataFile =new File(DataFilePath);\r\n        FileReader fr = new FileReader(DataFile);\r\n        BufferedReader reader = new BufferedReader(fr);\r\n\r\n        bufferString = reader.readLine();\r\n        System.out.println(bufferString);\r\n\r\n        String QuestionBuff;\r\n        String AnswerBuff;\r\n\r\n        while (bufferString!=null){                                                                     //пока не закончатся строки в файле\r\n\r\n            if(bufferString.length()==0)\r\n                bufferString = reader.readLine();\r\n\r\n            characterIndex = bufferString.length();\r\n            QuestionArr[QuestionNumber] = bufferString.toCharArray();\t\t\t\t\t\t\t        //кладем строку в массив посимвольно\r\n\r\n            for (int x = 0; x < characterIndex; x++) {\t\t\t\t\t\t\t\t\t\t\t\t\t//цикл для определения \"зоны ответа\"\r\n                if ((QuestionArr[QuestionNumber][x] == '\\t')) {\t\t\t\t\t\t\t\t\t\t\t//табуляция указывает на то, что после нее искомый для данной строчки предлог\r\n                    QuestionArr[QuestionNumber][x] = ' ';\t\t\t\t\t\t\t\t\t\t\t\t//убераем табуляцию\r\n                    x++;\r\n                    answerIndexChar = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//обнуляем счетчик начального символа \"ответа\"\r\n                    AnswerBuff = \"\";\r\n                    QuestionBuff = \"\";\r\n\r\n                    for(int y = 0 ; y < x ; y++){\r\n                        QuestionBuff+=Character.toString(QuestionArr[QuestionNumber][y]);\r\n                    }\r\n\r\n                    QuestionBuff+=\" \";\r\n\r\n                    while (x< characterIndex) {\t\t\t\t\t\t\t\t\t\t                    //пока текущая строка не закончится\r\n                        AnswerArr[QuestionNumber][answerIndexChar] = QuestionArr[QuestionNumber][x];\t//кладем предлог в массив для ответов посимвольно\r\n                        AnswerBuff+=Character.toString(AnswerArr[QuestionNumber][answerIndexChar]);\r\n\r\n                        x++;\r\n                        answerIndexChar++;\r\n                    }\r\n\r\n                    AnswerArr[QuestionNumber]=AnswerBuff.toCharArray();\t\t\t\t\t\t\t\t\t\t//ставим знак конца строки в конце ответа\r\n                    QuestionArr[QuestionNumber]=QuestionBuff.toCharArray();\r\n\r\n                    //System.out.println(AnswerArr[QuestionNumber]);\r\n                }\r\n\r\n            }\r\n\r\n            if (QuestionArr[QuestionNumber][0] != '\\n' && QuestionArr[QuestionNumber][0] !=0 && QuestionArr[QuestionNumber][0]!='*')  //это условие позволяет пропускать пустые строки и строки, начинающиеся с *\r\n                QuestionNumber++;                                                                                                                                   //только при соблюдения этого условия, идет запись следующей строки в массив\r\n\r\n            bufferString = reader.readLine();\r\n\r\n        }\r\n\r\n        Randomize();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//сразу после созданияя массивов с вопросами и ответами - формируется массив случайных чисел\r\n        //System.out.println(\"Я СДЕЛЯЛ\");\r\n        return 0;\r\n    }\r\n    private int Randomize(){\t\t\t\t\t\t\t\t//метод для созданиия последовательности случайных{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//неповторяющихся чисел\r\n        int arrlength;\r\n        arrlength = QuestionNumber;\r\n        int[] nonReccurentCheckArr = new int[arrlength];\t\t\t\t\t\t\t\t\t//буферный массив, для чисел, которые уже были использованы (чтобы чтсла не повторялись)\r\n        int[] randomNumbersArr = new int[arrlength];\t\t\t\t\t\t\t\t\t\t//массив с конечной последовательностью неповторяющихся случайных чисел\r\n\r\n        int RandBuff;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//числовой буфер для сгенерированного числа\r\n        int x=0;\r\n\r\n        SecureRandom secureRandom = new SecureRandom();\r\n\r\n        RandomNumberArrPointer = randomNumbersArr;\t\t\t\t\t\t\t\t\t//передаем адрес первого элемента массива в POINT\r\n\r\n\r\n        for (int i = 0; i < QuestionNumber; i++) {\t\t\t\t\t\t\t\t\t//буферный массив заполняем числами, которые никак не могут быть индексом массива\r\n            nonReccurentCheckArr[i] = -1;\r\n        }\r\n\r\n        for (;;) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//цикл работает до тех пор, пока не будет сгенерированно количество чисел равное количеству вопросов в тесте\r\n            RandBuff = secureRandom.nextInt(QuestionNumber-1);\r\n\r\n            if (nonReccurentCheckArr[RandBuff] == -1) {\t\t\t\t\t\t\t\t//если свежесгенерированное число еще не использованно, записываем его в массив\r\n                randomNumbersArr[x] = RandBuff;\r\n                nonReccurentCheckArr[RandBuff] = -2;\r\n                x++;\r\n            }\r\n\r\n            if (x == QuestionNumber-1) break;\r\n\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n    String getAnswer() {\r\n        String answer;\r\n        Scanner read = new Scanner(System.in);\r\n        answer=read.nextLine();\r\n        return answer;\r\n    }\r\n\r\n    int checkAnswer(String answer, String rightAnswer){\r\n//Принимает результат ввода и возвращает 1 при правельном ответе,\r\n//2 при неправильном\r\n//3 при введении команды \"next\" - для пропуска вопроса и выведения правильного ответа\r\n//и 0 при команде finish\r\n        String commandFinish = \"finish\";\r\n        String commandNext = \"next\";\r\n\r\n        if (answer.equals(rightAnswer)) {\r\n            System.out.println(\"Correct\\n\");\r\n            return 1;\r\n        }\r\n\r\n        else if (answer.equals(commandFinish)) {\r\n            return 0;\r\n        }\r\n\r\n        else if (answer.equals(commandNext)) {\r\n            return 3;\r\n        }\r\n\r\n        else {\r\n            System.out.println(\"INCORRECT\\n\");\r\n            return 2;\r\n        }\r\n\r\n    }\r\n    public int TestingSummery()\r\n    {\r\n        System.out.println(\"Всего \"+ErrorsNumber+\" ошибок  в \"+QuestionNumber+\" вопросах\");\r\n        System.out.println(\"Ошибки:\\n\");\r\n\r\n        for (int i = 0; i < WrongIndex; i++) {\t\t\t\t\t\t\t//выдает на экран все правильные фразы в которых была допущена ошибка\r\n            System.out.print(QuestionArr[WrongAnswer[i]]);\r\n            System.out.println(AnswerArr[WrongAnswer[i]]);\r\n        }\r\n\r\n\r\n        System.out.println(\"\\nПропущенные вопросы:\\n\");\r\n\r\n        for (int x = 0; x < MissedIndex; x++) {\t\t\t\t\t\t\t//выдает на экран все фразы, которые были пропущены\r\n            System.out.print(QuestionArr[MissedQuestions[x]]);\r\n            System.out.println(AnswerArr[MissedQuestions[x]]);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/CoreTesting.java b/src/main/java/CoreTesting.java
--- a/src/main/java/CoreTesting.java	(revision be23b8d20bccc82f9589723e16040782b618e776)
+++ b/src/main/java/CoreTesting.java	(date 1674246281778)
@@ -1,4 +1,7 @@
-import java.io.*;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
 import java.security.SecureRandom;
 import java.util.Scanner;
 
@@ -16,6 +19,15 @@
     protected int TestingType = 0;				//хранит число, соответствующее типу тестирования
     String DataFilePath;                                           //0-тест закончен
                                                 //1-тест на знание фразовых конструкций
+    static EnglishHelperBot sendbot;
+
+    static {
+        try {
+            sendbot = new EnglishHelperBot();
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
 
     CoreTesting(String path) throws IOException {
         DataFilePath=path;
@@ -123,10 +135,13 @@
     }
 
 
-    String getAnswer() {
+    static String getAnswer(String botanswer) {
         String answer;
-        Scanner read = new Scanner(System.in);
-        answer=read.nextLine();
+        //sendbot.sendMessage("Getting Answer");
+        //sendbot.sendMessage(botanswer);
+        //Scanner read = new Scanner(System.in);
+        //answer=read.nextLine();
+        answer = botanswer;
         return answer;
     }
 
@@ -139,6 +154,7 @@
         String commandNext = "next";
 
         if (answer.equals(rightAnswer)) {
+            sendbot.sendMessage("Correct");
             System.out.println("Correct\n");
             return 1;
         }
@@ -152,6 +168,7 @@
         }
 
         else {
+            sendbot.sendMessage("INCORRECT");
             System.out.println("INCORRECT\n");
             return 2;
         }
Index: src/main/java/EnglishHelperBot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.telegram.telegrambots.bots.TelegramLongPollingBot;\r\nimport org.telegram.telegrambots.meta.TelegramBotsApi;\r\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\r\nimport org.telegram.telegrambots.meta.api.objects.Update;\r\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;\r\nimport org.telegram.telegrambots.updatesreceivers.DefaultBotSession;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic  class EnglishHelperBot extends TelegramLongPollingBot {\r\n\r\n    public static final String BOT_TOKEN = \"5968444384:AAHhKT990kcYwv6W7HLJ3uqhXZalO0TzGY8\";\r\n\r\n    public static final String BOT_USERNAME = \"NASA_picture_test_bot\";\r\n\r\n    public static final String URI = \"https://api.nasa.gov/planetary/apod?api_key=qu3RbJ7SHYNBbsCegaiKEYWJ7hJleu4xaEKRDmT7\";\r\n\r\n    public static long chat_id;\r\n    Update updateCash;\r\n\r\n    public EnglishHelperBot()  {\r\n    }\r\n\r\n    public void Start() throws TelegramApiException{\r\n        TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);\r\n        botsApi.registerBot(this);\r\n    }\r\n    @Override\r\n    public String getBotUsername() {\r\n        return BOT_USERNAME;\r\n    }\r\n\r\n    @Override\r\n    public String getBotToken() {\r\n        return BOT_TOKEN;\r\n    }\r\n\r\n    @Override\r\n    public void onUpdateReceived(Update update) {\r\n        if (update.hasMessage()) {\r\n            chat_id = update.getMessage().getChatId();\r\n            BotLogic();\r\n        }\r\n    }\r\n\r\n    public void BotLogic(){\r\n        switch (updateCash.getMessage().getText()) {\r\n            case \"/help\":\r\n                sendMessage(\"Привет, я English Helper! Я провожу различные тесты на знание английского\");\r\n                break;\r\n            case \"/give\":\r\n                    \r\n                break;\r\n            default:\r\n                sendMessage(\"Я не понимаю :(\");\r\n        }\r\n    }\r\n\r\n    private void sendMessage(String messageText) {\r\n        SendMessage message = new SendMessage();\r\n        message.setChatId(chat_id);\r\n        message.setText(messageText);\r\n        try {\r\n            execute(message);\r\n        } catch (TelegramApiException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    static int StartTesting() throws IOException {\r\n        int testingType;\r\n        String pathBuff;\r\n        Scanner read = new Scanner(System.in);\r\n        System.out.println(\"Для проведения теста по Phrasal verbs, Prepositional phrases, Word patterns \\nВведите '1'\\n\");\r\n        System.out.println(\"Для проведения теста - Инфинитив или Герундий\\nВведите '2'\");\r\n        System.out.println(\"Для завершения теста введите finish\");\r\n        System.out.println(\"Для пропуска вопроса введите next\");\r\n        testingType = read.nextInt();\r\n\r\n\r\n        switch(testingType){ //Вызывается метод для определения типа теста\r\n            case 1:\r\n                pathBuff = \"C:\\\\Users\\\\Odd\\\\IdeaProjects\\\\EnglishHelperJ\\\\EnglishHelperJ\\\\PhrasalV.txt\";\r\n                Phrasal case1 = new Phrasal(pathBuff);\r\n                case1.Start();\r\n                break;\r\n\r\n            case 2:\r\n                pathBuff = \"C:\\\\Users\\\\Odd\\\\IdeaProjects\\\\EnglishHelperJ\\\\EnglishHelperJ\\\\InfinitiveOrGerund.txt\";\r\n                InfinitiveGerund case2 = new InfinitiveGerund(pathBuff);\r\n                case2.Start();\r\n                break;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/EnglishHelperBot.java b/src/main/java/EnglishHelperBot.java
--- a/src/main/java/EnglishHelperBot.java	(revision be23b8d20bccc82f9589723e16040782b618e776)
+++ b/src/main/java/EnglishHelperBot.java	(date 1674246586134)
@@ -10,16 +10,18 @@
 
 public  class EnglishHelperBot extends TelegramLongPollingBot {
 
-    public static final String BOT_TOKEN = "5968444384:AAHhKT990kcYwv6W7HLJ3uqhXZalO0TzGY8";
+    public static final String BOT_TOKEN = "5903766429:AAGNBtj3oXkL2-d4lwIYkVt2kJY9aeicR_A";
 
-    public static final String BOT_USERNAME = "NASA_picture_test_bot";
-
-    public static final String URI = "https://api.nasa.gov/planetary/apod?api_key=qu3RbJ7SHYNBbsCegaiKEYWJ7hJleu4xaEKRDmT7";
+    public static final String BOT_USERNAME = "English_HelperJ_bot";
 
     public static long chat_id;
+    static Update update2;
     Update updateCash;
-
-    public EnglishHelperBot()  {
+    static String botAnswer;
+    int menu = 0;
+    InfinitiveGerund case2 = new InfinitiveGerund("C:\\Users\\Odd\\IdeaProjects\\EnglishHelperJ\\EnglishHelperJ\\InfinitiveOrGerund.txt");
+    Phrasal case1 = new Phrasal("C:\\Users\\Odd\\IdeaProjects\\EnglishHelperJ\\EnglishHelperJ\\PhrasalV.txt");
+    public EnglishHelperBot() throws IOException {
     }
 
     public void Start() throws TelegramApiException{
@@ -38,26 +40,58 @@
 
     @Override
     public void onUpdateReceived(Update update) {
-        if (update.hasMessage()) {
-            chat_id = update.getMessage().getChatId();
-            BotLogic();
+        update2 = update;
+        if (update2.hasMessage()) {
+            chat_id = update2.getMessage().getChatId();
+            botAnswer = update2.getMessage().getText();
+
+            try {
+                BotLogic();
+            } catch (IOException e) {
+                throw new RuntimeException(e);
+            }
         }
     }
 
-    public void BotLogic(){
-        switch (updateCash.getMessage().getText()) {
-            case "/help":
-                sendMessage("Привет, я English Helper! Я провожу различные тесты на знание английского");
-                break;
-            case "/give":
-                    
-                break;
-            default:
-                sendMessage("Я не понимаю :(");
+    public void BotLogic() throws IOException {
+        if(menu == 0) {
+            switch (botAnswer) {
+                case "/help":
+                    sendMessage("Привет, я English Helper! Я провожу различные тесты на знание английского.");
+                    break;
+                case "/s":
+                    StartTesting();
+                    sendMessage("Для проведения теста по Phrasal verbs, Prepositional phrases, Word patterns Введите '1'\n"+
+                            "Для проведения теста - Инфинитив или Герундий Введите '2'\n"+
+                            "Для завершения теста введите finish\n"+
+                            "Для пропуска вопроса введите next");
+                    menu = 1;
+                    break;
+                default:
+                    sendMessage("Я не понимаю :(");
+            }
+        } else if(menu == 1){
+            switch (botAnswer){
+                case "1":
+                    case1.Start();
+                    break;
+                case "2":
+                    menu = 3;
+                    case2.FileToArray();
+                    case2.showQuestion();
+                    break;
+            }
+        } else if(menu == 3){
+            //case2.showQuestion();
+            if(update2.hasMessage()) {
+                InfinitiveGerund.botInfAnswer = botAnswer;
+                //sendMessage(case2.botInfAnswer+" ");
+                case2.InfGerundTesting();
+            }
         }
     }
 
-    private void sendMessage(String messageText) {
+    public void sendMessage(String messageText) {
         SendMessage message = new SendMessage();
         message.setChatId(chat_id);
         message.setText(messageText);
@@ -68,30 +102,26 @@
         }
     }
 
-    static int StartTesting() throws IOException {
-        int testingType;
-        String pathBuff;
+    int StartTesting() throws IOException {
+        //int testingType;
+
         Scanner read = new Scanner(System.in);
         System.out.println("Для проведения теста по Phrasal verbs, Prepositional phrases, Word patterns \nВведите '1'\n");
         System.out.println("Для проведения теста - Инфинитив или Герундий\nВведите '2'");
         System.out.println("Для завершения теста введите finish");
         System.out.println("Для пропуска вопроса введите next");
-        testingType = read.nextInt();
+        //testingType = read.nextInt();
 
 
-        switch(testingType){ //Вызывается метод для определения типа теста
-            case 1:
-                pathBuff = "C:\\Users\\Odd\\IdeaProjects\\EnglishHelperJ\\EnglishHelperJ\\PhrasalV.txt";
-                Phrasal case1 = new Phrasal(pathBuff);
+        /*switch(botAnswer){ //Вызывается метод для определения типа теста
+            case "1":
                 case1.Start();
                 break;
 
-            case 2:
-                pathBuff = "C:\\Users\\Odd\\IdeaProjects\\EnglishHelperJ\\EnglishHelperJ\\InfinitiveOrGerund.txt";
-                InfinitiveGerund case2 = new InfinitiveGerund(pathBuff);
+            case "2":
                 case2.Start();
                 break;
-        }
+        }*/
         return 0;
     }
 }
Index: src/main/java/Phrasal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.IOException;\r\n\r\npublic class Phrasal extends CoreTesting{\r\n    Phrasal(String path) throws IOException {\r\n        super(path);\r\n    }\r\n\r\n    void Start() throws IOException {\r\n        FileToArray();\r\n        PhrasalTesting();\r\n        TestingSummery();\r\n    }\r\n\r\n    int PhrasalTesting()\r\n    {\t\t\t\t\t\t\t\t\t\t\t\t\t                                    //основной метод для запуска теста{\r\n        int activeQuestionNumber = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//индекс вопросса/ответа в порядке их выведения\r\n        String activeAnswer;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//строковый буфер для проверки правильности ответа\r\n        String activeQuestion;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//строковый буфер для текущего вопроса\r\n        int typeCommand = 1;\t\t\t\t\t\t\t\t\t\t\t\t\t\t        //управляющая переменная\r\n        boolean isQuestionRepeated = false;\t\t\t\t\t\t\t\t\t\t\t\t\t//переменная для повторяющегося неверного ответа\r\n\r\n\r\n        for (;;) {\r\n            if (typeCommand == 0|| activeQuestionNumber == QuestionNumber) {\t\t\t\t\t\t//цикл заканчивает работу либо при переборе всех строк из файла\r\n                TestingType = 0;\r\n                break;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//либо если методом проверки возвращен 0\r\n            }\r\n\r\n            activeAnswer = String.copyValueOf(AnswerArr[RandomNumberArrPointer[activeQuestionNumber]]);\t\t\t\t\t//в буфер помещаются строки, соответствующие случайному\r\n            activeQuestion = String.copyValueOf(QuestionArr[RandomNumberArrPointer[activeQuestionNumber]]);\t\t\t\t//числу, лежащему в массиве случайных числел\r\n\r\n            System.out.println(activeQuestion+\"___\");\r\n            typeCommand = checkAnswer(getAnswer(), activeAnswer);\t\t\t\t\t\t\t\t\t//проверка правильного ответа\r\n\r\n                if (typeCommand == 1) {                                                             //при правильном ответе выводится новая строка\r\n                activeQuestionNumber++;\r\n                isQuestionRepeated = false;\r\n            }\r\n\r\n            if (typeCommand == 2) {\r\n                ErrorsNumber++;\r\n                if (isQuestionRepeated == false) {\t\t\t\t\t\t\t\t\t\t\t\t\t//если ошибочный ответ дан первый раз\r\n                    WrongAnswer[WrongIndex] = RandomNumberArrPointer[activeQuestionNumber];\t\t\t//в массив кладется номер текущего вопроса и ответа\r\n                    WrongIndex++;\r\n                    isQuestionRepeated = true;\r\n                }\r\n\r\n\r\n            }\r\n\r\n            if (typeCommand == 3) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//в случае пропуска вопроса - выводится правильный ответ\r\n                System.out.println(AnswerArr[RandomNumberArrPointer[activeQuestionNumber]]);\t\t\t\t//и после выводится новая строка\r\n                ErrorsNumber++;\r\n                MissedQuestions[MissedIndex] = RandomNumberArrPointer[activeQuestionNumber];\t\t\t\t//в масив кладется номер текущего вопроса и ответа\r\n                MissedIndex++;\r\n                activeQuestionNumber++;\r\n                isQuestionRepeated = false;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Phrasal.java b/src/main/java/Phrasal.java
--- a/src/main/java/Phrasal.java	(revision be23b8d20bccc82f9589723e16040782b618e776)
+++ b/src/main/java/Phrasal.java	(date 1674241849662)
@@ -1,6 +1,7 @@
 import java.io.IOException;
 
 public class Phrasal extends CoreTesting{
+    static String botPhraseAnswer;
     Phrasal(String path) throws IOException {
         super(path);
     }
@@ -30,7 +31,7 @@
             activeQuestion = String.copyValueOf(QuestionArr[RandomNumberArrPointer[activeQuestionNumber]]);				//числу, лежащему в массиве случайных числел
 
             System.out.println(activeQuestion+"___");
-            typeCommand = checkAnswer(getAnswer(), activeAnswer);									//проверка правильного ответа
+            typeCommand = checkAnswer(getAnswer(botPhraseAnswer), activeAnswer);									//проверка правильного ответа
 
                 if (typeCommand == 1) {                                                             //при правильном ответе выводится новая строка
                 activeQuestionNumber++;
Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        StartTesting();\r\n\r\n    }\r\n\r\n     static int StartTesting() throws IOException {\r\n        int testingType;\r\n        String pathBuff;\r\n        Scanner read = new Scanner(System.in);\r\n        System.out.println(\"Для проведения теста по Phrasal verbs, Prepositional phrases, Word patterns \\nВведите '1'\\n\");\r\n        System.out.println(\"Для проведения теста - Инфинитив или Герундий\\nВведите '2'\");\r\n        System.out.println(\"Для завершения теста введите finish\");\r\n        System.out.println(\"Для пропуска вопроса введите next\");\r\n        testingType = read.nextInt();\r\n\r\n\r\n        switch(testingType){ //Вызывается метод для определения типа теста\r\n            case 1:\r\n                pathBuff = \"C:\\\\Users\\\\Odd\\\\IdeaProjects\\\\EnglishHelperJ\\\\EnglishHelperJ\\\\PhrasalV.txt\";\r\n                Phrasal case1 = new Phrasal(pathBuff);\r\n                case1.Start();\r\n                break;\r\n\r\n            case 2:\r\n                pathBuff = \"C:\\\\Users\\\\Odd\\\\IdeaProjects\\\\EnglishHelperJ\\\\EnglishHelperJ\\\\InfinitiveOrGerund.txt\";\r\n                InfinitiveGerund case2 = new InfinitiveGerund(pathBuff);\r\n                case2.Start();\r\n                break;\r\n        }\r\n         return 0;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision be23b8d20bccc82f9589723e16040782b618e776)
+++ b/src/main/java/Main.java	(date 1674239583218)
@@ -1,37 +1,14 @@
+import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
+
 import java.io.IOException;
 import java.util.Scanner;
 
 public class Main {
 
-    public static void main(String[] args) throws IOException {
-        StartTesting();
-
+    public static void main(String[] args) throws IOException, TelegramApiException {
+        EnglishHelperBot bot = new EnglishHelperBot();
+        bot.Start();
     }
 
-     static int StartTesting() throws IOException {
-        int testingType;
-        String pathBuff;
-        Scanner read = new Scanner(System.in);
-        System.out.println("Для проведения теста по Phrasal verbs, Prepositional phrases, Word patterns \nВведите '1'\n");
-        System.out.println("Для проведения теста - Инфинитив или Герундий\nВведите '2'");
-        System.out.println("Для завершения теста введите finish");
-        System.out.println("Для пропуска вопроса введите next");
-        testingType = read.nextInt();
 
-
-        switch(testingType){ //Вызывается метод для определения типа теста
-            case 1:
-                pathBuff = "C:\\Users\\Odd\\IdeaProjects\\EnglishHelperJ\\EnglishHelperJ\\PhrasalV.txt";
-                Phrasal case1 = new Phrasal(pathBuff);
-                case1.Start();
-                break;
-
-            case 2:
-                pathBuff = "C:\\Users\\Odd\\IdeaProjects\\EnglishHelperJ\\EnglishHelperJ\\InfinitiveOrGerund.txt";
-                InfinitiveGerund case2 = new InfinitiveGerund(pathBuff);
-                case2.Start();
-                break;
-        }
-         return 0;
-    }
 }
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>org.example</groupId>\r\n    <artifactId>EnglishHelperBot</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <maven.compiler.source>11</maven.compiler.source>\r\n        <maven.compiler.target>11</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n    \r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision be23b8d20bccc82f9589723e16040782b618e776)
+++ b/pom.xml	(date 1674239173324)
@@ -13,5 +13,45 @@
         <maven.compiler.target>11</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     </properties>
-    
-</project>
\ No newline at end of file
+    <dependencies>
+            <dependency>
+            <groupId>org.telegram</groupId>
+            <artifactId>telegrambots</artifactId>
+            <version>6.1.0</version>
+        </dependency>
+    </dependencies>
+
+    <build>
+    <finalName>NasaBot</finalName>
+    <plugins>
+        <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <version>3.8.1</version>
+        <configuration>
+            <release>11</release>
+        </configuration>
+    </plugin>
+    <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-dependency-plugin</artifactId>
+        <version>3.1.2</version>
+        <executions>
+            <execution>
+                <id>copy-dependencies</id>
+                <phase>package</phase>
+                <goals>
+                    <goal>copy-dependencies</goal>
+                </goals>
+            </execution>
+        </executions>
+    </plugin>
+    <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-surefire-plugin</artifactId>
+        <version>3.0.0-M5</version>
+        </plugin>
+    </plugins>
+    </build>
+
+    </project>
\ No newline at end of file
Index: src/main/java/InfinitiveGerund.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.IOException;\r\n\r\npublic class InfinitiveGerund extends CoreTesting {\r\n    InfinitiveGerund(String path) throws IOException {\r\n        super(path);\r\n    }\r\n\r\n    void Start() throws IOException {\r\n        System.out.println(\"В случае использования инфинитива введите to\");\r\n        System.out.println(\"В случае использования инфинитива введите ing\");\r\n\r\n        FileToArray();\r\n        InfGerundTesting();\r\n        TestingSummery();\r\n    }\r\n\r\n    int InfGerundTesting(){\t\t\t\t\t\t\t\t\t\t\t\t\t                //основной метод для запуска теста{\r\n        int activeQuestionNumber = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//индекс вопросса/ответа в порядке их выведения\r\n        String activeAnswer;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//строковый буфер для проверки правильности ответа\r\n        String activeQuestion;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//строковый буфер для текущего вопроса\r\n        int typeCommand = 1;\t\t\t\t\t\t\t\t\t\t\t\t\t\t        //управляющая переменная\r\n        boolean isQuestionRepeated = false;\t\t\t\t\t\t\t\t\t\t\t\t\t//переменная для повторяющегося неверного ответа\r\n\r\n        System.out.println(QuestionNumber);\r\n        for (;;) {\r\n\r\n            if (typeCommand == 0|| activeQuestionNumber == QuestionNumber) {\t\t\t\t\t\t//цикл заканчивает работу либо при переборе всех строк из файла\r\n                TestingType = 0;\r\n                break;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//либо если методом проверки возвращен 0\r\n            }\r\n\r\n            activeAnswer = String.copyValueOf(AnswerArr[RandomNumberArrPointer[activeQuestionNumber]]);\t\t\t\t\t//в буфер помещаются строки, соответствующие случайному\r\n            activeQuestion = String.copyValueOf(QuestionArr[RandomNumberArrPointer[activeQuestionNumber]]);\t\t\t\t//числу, лежащему в массиве случайных числел\r\n\r\n            System.out.println(activeQuestionNumber);\r\n            System.out.println(activeQuestion);\r\n\r\n            typeCommand = checkAnswer(getAnswer(), activeAnswer);\t\t\t\t\t\t\t\t\t//проверка правильного ответа\r\n            //при правильном ответе выводится новая строка\r\n            if (typeCommand == 1) {\r\n                activeQuestionNumber++;\r\n                isQuestionRepeated = false;\r\n            }\r\n\r\n            if (typeCommand == 2) {\r\n                ErrorsNumber++;\r\n                if (isQuestionRepeated == false) {\t\t\t\t\t\t\t\t\t\t\t\t\t//если ошибочный ответ дан первый раз\r\n                    WrongAnswer[WrongIndex] = RandomNumberArrPointer[activeQuestionNumber];\t\t\t//в массив кладется номер текущего вопроса и ответа\r\n                    WrongIndex++;\r\n                    isQuestionRepeated = true;\r\n                }\r\n\r\n\r\n            }\r\n\r\n            if (typeCommand == 3) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//в случае пропуска вопроса - выводится правильный ответ\r\n                System.out.println(AnswerArr[RandomNumberArrPointer[activeQuestionNumber]]);\t\t\t\t//и после выводится новая строка\r\n                ErrorsNumber++;\r\n                MissedQuestions[MissedIndex] = RandomNumberArrPointer[activeQuestionNumber];\t\t\t\t//в масив кладется номер текущего вопроса и ответа\r\n                MissedIndex++;\r\n                activeQuestionNumber++;\r\n                isQuestionRepeated = false;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/InfinitiveGerund.java b/src/main/java/InfinitiveGerund.java
--- a/src/main/java/InfinitiveGerund.java	(revision be23b8d20bccc82f9589723e16040782b618e776)
+++ b/src/main/java/InfinitiveGerund.java	(date 1674246710655)
@@ -1,6 +1,20 @@
 import java.io.IOException;
 
 public class InfinitiveGerund extends CoreTesting {
+    public static String botInfAnswer = " ";
+    static EnglishHelperBot sendbot;
+    static int activeQuestionNumber = 0;
+    boolean isQuestionRepeated = false;
+
+
+    static {
+        try {
+            sendbot = new EnglishHelperBot();
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
     InfinitiveGerund(String path) throws IOException {
         super(path);
     }
@@ -11,34 +25,42 @@
 
         FileToArray();
         InfGerundTesting();
-        TestingSummery();
+        //TestingSummery();
+    }
+    void showQuestion(){
+        String showActiveQuestion = String.copyValueOf(QuestionArr[RandomNumberArrPointer[activeQuestionNumber]]);
+        sendbot.sendMessage(showActiveQuestion);
     }
 
     int InfGerundTesting(){													                //основной метод для запуска теста{
-        int activeQuestionNumber = 0;														//индекс вопросса/ответа в порядке их выведения
+        													//индекс вопросса/ответа в порядке их выведения
         String activeAnswer;																//строковый буфер для проверки правильности ответа
         String activeQuestion;																//строковый буфер для текущего вопроса
         int typeCommand = 1;														        //управляющая переменная
-        boolean isQuestionRepeated = false;													//переменная для повторяющегося неверного ответа
+        												//переменная для повторяющегося неверного ответа
 
-        System.out.println(QuestionNumber);
-        for (;;) {
+        //System.out.println(QuestionNumber);
+       // for (;;) {
 
             if (typeCommand == 0|| activeQuestionNumber == QuestionNumber) {						//цикл заканчивает работу либо при переборе всех строк из файла
                 TestingType = 0;
-                break;																				//либо если методом проверки возвращен 0
+                //break;																				//либо если методом проверки возвращен 0
             }
 
             activeAnswer = String.copyValueOf(AnswerArr[RandomNumberArrPointer[activeQuestionNumber]]);					//в буфер помещаются строки, соответствующие случайному
             activeQuestion = String.copyValueOf(QuestionArr[RandomNumberArrPointer[activeQuestionNumber]]);				//числу, лежащему в массиве случайных числел
-
-            System.out.println(activeQuestionNumber);
+            //showQuestion();
+            //System.out.println(activeQuestionNumber);
             System.out.println(activeQuestion);
+            //sendbot.sendMessage(activeQuestion);
+            System.out.println(botInfAnswer);
+            //sendbot.sendMessage(botInfAnswer);
 
-            typeCommand = checkAnswer(getAnswer(), activeAnswer);									//проверка правильного ответа
+            typeCommand = checkAnswer(getAnswer(botInfAnswer), activeAnswer);									//проверка правильного ответа
             //при правильном ответе выводится новая строка
             if (typeCommand == 1) {
                 activeQuestionNumber++;
+                showQuestion();
                 isQuestionRepeated = false;
             }
 
@@ -47,6 +69,7 @@
                 if (isQuestionRepeated == false) {													//если ошибочный ответ дан первый раз
                     WrongAnswer[WrongIndex] = RandomNumberArrPointer[activeQuestionNumber];			//в массив кладется номер текущего вопроса и ответа
                     WrongIndex++;
+                    showQuestion();
                     isQuestionRepeated = true;
                 }
 
@@ -59,9 +82,10 @@
                 MissedQuestions[MissedIndex] = RandomNumberArrPointer[activeQuestionNumber];				//в масив кладется номер текущего вопроса и ответа
                 MissedIndex++;
                 activeQuestionNumber++;
+                showQuestion();
                 isQuestionRepeated = false;
             }
-        }
+       // }
 
         return 0;
     }
